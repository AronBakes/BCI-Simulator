import numpy as np
import os

class EEGPreprocessor:
    """A class to preprocess EEG time series data for machine learning models.

    This class normalizes EEG data and creates sliding windows with binary labels
    based on amplitude thresholds.
    """

    def __init__(self, window_size=256, step_size=128, threshold=1.5):
        """Initialize the EEGPreprocessor with windowing parameters.

        Args:
            window_size (int, optional): Number of time points in each window. Defaults to 256.
            step_size (int, optional): Step size for sliding window. Defaults to 128.
            threshold (float, optional): Amplitude threshold for binary labels. Defaults to 1.5.

        Attributes:
            window_size (int): Window size in time points.
            step_size (int): Step size for sliding.
            threshold (float): Threshold for labeling.
        """
        self.window_size = window_size
        self.step_size = step_size
        self.threshold = threshold

    def normalize(self, data):
        """Normalize EEG data to zero mean and unit variance.

        Args:
            data (np.ndarray): EEG data with shape (n_samples, n_channels, time_points).

        Returns:
            np.ndarray: Normalized data with the same shape as input.

        Notes:
            Adds a small epsilon (1e-8) to avoid division by zero.
        """
        data = data - np.mean(data, axis=2, keepdims=True)
        data = data / (np.std(data, axis=2, keepdims=True) + 1e-8)
        return data

    def create_windows(self, data):
        """Create sliding windows from EEG data with corresponding labels.

        Args:
            data (np.ndarray): Normalized EEG data with shape (n_samples, n_channels, time_points).

        Returns:
            tuple: (windows, labels) where windows is (n_windows, window_size, n_channels)
                   and labels is (n_windows,) with binary values.

        Notes:
            Labels are 1 if max amplitude exceeds threshold, else 0.
        """
        n_samples, n_channels, time_points = data.shape
        windows = []
        labels = []

        for i in range(n_samples):
            for j in range(0, time_points - self.window_size + 1, self.step_size):
                window = data[i, :, j:j + self.window_size].T
                windows.append(window)
                label = 1 if np.max(np.abs(window)) > self.threshold else 0
                labels.append(label)

        return np.array(windows), np.array(labels)

    def preprocess(self, data_path="data/raw/eeg_data.npz", save_path="data/processed/eeg_processed.npz"):
        """Preprocess EEG dataset and save the results.

        Args:
            data_path (str, optional): Path to raw EEG data. Defaults to "data/raw/eeg_data.npz".
            save_path (str, optional): Path to save processed data. Defaults to "data/processed/eeg_processed.npz".

        Returns:
            tuple: (windows, labels) as generated by create_windows.

        Notes:
            Loads data from .npz and saves windows and labels.
        """
        data = np.load(data_path)['data']
        data = self.normalize(data)
        windows, labels = self.create_windows(data)
        
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        np.savez(save_path, windows=windows, labels=labels)
        return windows, labels

if __name__ == "__main__":
    preprocessor = EEGPreprocessor(window_size=256, step_size=128)
    windows, labels = preprocessor.preprocess()
    print(f"Windows shape: {windows.shape}, Labels shape: {labels.shape}")